# docker: remove ALL dangling images
docker rmi $(docker images -f "dangling=true" -q)

# Copy SSH key to server
ssh-copy-id -i ~/.ssh/id_rsa.pub user@server

# Delete stopped Docker containers  with awk
docker rm -f $(docker container ps -a | grep -v "^CONTAINER" | awk '{print $1}')

# Create new user
useradd -m -r -U $USERNAME -p $(openssl passwd -crypt $CLEARPASSWD)

# Create passwd for new user
echo -e "password\npassword" | passwd $USER

# Configure ssh for new user
sudo chown -R username:usergroup /home/username/.ssh
sudo chmod 0700 /home/username/.ssh
sudo chmod 0600 /home/username/.ssh/authorized_keys

# Set timezone
sudo ntpdate ntp.ubuntu.com
sudo tzselect
echo "TZ='Europe/Berlin'; export TZ" >> ~/.profile
sudo mv /etc/localtime /etc/localtime.old
sudo ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime

# Wifi config
sudo lshw -C network
iwconfig

# Encrypt file with passphrase with gpg
gpg -c file

# Decrypt with gpg
gpg file

# Get IP
curl ipinfo.io/ip

# Rsync
rsync -zvP $HOST $REMOTE

# openssl: Connect with s_client
openssl s_client -connect host:port

# ssh: Port Forwarding
ssh -l $USER -p $PORT  -L 1234:localhost:22 $HOST

# git: Adding git remote, u = upstream
git remote add origin git@github.com:obitech/REPO.git
git push -u origin master

# git: Updating git remote
git remote set-url origin git@github.com:obitech/REPO.git

# git: create and checkout into new branch
git checkout -b $BRANCH

# git: only show short hash of last commit
git log --oneline | awk '{print $1}' | head -1

# Firefox: prevent WebRTC leaks
media.peerconnection.enabled = false

# Firefox: prevent HTML canvans fingerprinting
privacy.resistFingerprinting = true

privacy.firstparty.isolate = true

# Firefox: user agent override
general.useragent.override
https://techblog.willshouse.com/2012/01/03/most-common-user-agents/

# Firfeox: keep it open when last tab closes
browser.tabs.closeWindowWithLastTab = false 

# tar: tar it up 
tar -cf archive.tar file1 file2

# tar: tar and compress files
tar czf archive.tar.gz file1 file2

# yotubue-dl: stream to vlc
youtube-dl -o "URL" | vlc -

# youtube-dl: download video
youtube-dl -o "/path/to/save/file" "URL"

# tar: backup home
sudo tar -zcpf /tmp/"$(date '+%Y%m%d')-backup-$CUSTOM_NAME.tar.gz" ~

#dig: Reverse DNS
dig +short $URL A

# dig: get hostname for IP
dig $IP

# dig: get as much info as possible
dig $URL ANY

# Location of iphone backup
~/Library/Application Support/MobileSync/Backup/

# virtualenv: Init venv with specific Python version
virtualenv --python=$(which python3) venv

# who: Get user in script when you are root
who am i | awk '{print $1}'

# minikube: start cluster on mac
minikube start --vm-driver=xhyve

# kubectl: set context to minikube
kubectl config use-context minikube

# ntfs: mount disk on mac
sudo /usr/local/bin/ntfs-3g /dev/$DISK /Volumes/NTFS -olocal -oallow_other

# ssh-keygen: generate new RSA SSH key without passphrase (-N)
ssh-keygen -b 4096 -t rsa -f /path/to/keyfile -q -N "" -C $(date '+%Y%m%d-%T')

# git: only clone latest commit
git clone --depth=1 $URL

# Python: sane logging defaults
logging.basicConfig(format='%(asctime)s:%(levelname)s:%(message)s', datefmt='%Y%m%d-%H%M%S', level=logging.INFO)

# dpkg: unattended upgrade confirmation default/old
DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade

# Unattended German keyboard setup
sed -i "s/XKBLAYOUT=.*/XKBLAYOUT=\"de\"/g" /etc/default/keyboard

# File redirect
diff <(transform <file1) <(transform <file2)

# sed: Remove \r\n from scripts written on windows
sed -i 's/\r//g' $FILE

# regex: version number
^(([0-9]+)|(([0-9]+\.[0-9]*)+))$

# kill: kill process by process name
ps -ef | grep 'myProcessName' | grep -v grep | awk '{print $2}' | xargs -r kill -9

# macOS: flush DNS cache
sudo killall -HUP mDNSResponder

# find: find "foo" in files
find /path/to/dir -type f | xargs grep -l "foo"

# echo into sudo
echo 'example' | sudo tee /path/to/file

# tcpdump: capture DNS traffic (-n => don't convert addrs to names) 
sudo tcpdump -i $IFACE port 53 -n

# tcpdump: see if any traffic is not sent via VPN
sudo tcpdump -i any "src not $INTERNALIP and dst not $VPNIP"

# tcpdump: show only ack packages
sudo tcpdump -i $IFACE -n 'tcp[tcpflags] & tcp-ack != 0'

# gunicorn: worker count, 1+2 * # cores
gunicorn -w $(( 2 * `cat /proc/cpuinfo | grep 'core id' | wc -l` + 1 )) myapp:wsgi

# gunicorn: set max-requests to restart workers, prevents memory leaks
gunicorn --max-requests 50
